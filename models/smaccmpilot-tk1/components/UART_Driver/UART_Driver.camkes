import "uart_shim/uart_shim.camkes";

import <SMACCM_DATA__UART_Packet_i_writer.idl4>;
import <bool_writer.idl4>;

component uartbase {
    hardware;
    dataport Buf uart_regs;
    emits DataAvailable irq;
}

component UART_Driver {
    include "tb_smaccmcopter_types.h";
    uses SMACCM_DATA__UART_Packet_i_writer self2decrypt;
    provides SMACCM_DATA__UART_Packet_i_writer encrypt2self;
    uses bool_writer self2encrypt;
  
    composition {
        component uartbase uartbase_obj;
        component uart_shim uart_shim_obj;

        connection seL4HardwareMMIO uart_regs_mmio(from uart_shim_obj.uart_regs, to uartbase_obj.uart_regs);
        connection seL4HardwareInterrupt uart_irq(from uartbase_obj.irq, to uart_shim_obj.interrupt);

        export uart_shim_obj.self2decrypt -> self2decrypt;
        export uart_shim_obj.encrypt2self -> encrypt2self;
        export uart_shim_obj.self2encrypt -> self2encrypt;
    }

    configuration {
        uartbase_obj.uart_regs_paddr = 0x70006000;
        uartbase_obj.uart_regs_size = 0x1000;

        // uartbase_obj.irq_irq_number = 68;   // UART A
        uartbase_obj.irq_irq_number = 69;      // UART B
        // uartbase_obj.irq_irq_number = 78;   // UART C
        // uartbase_obj.irq_irq_number = 122;  // UART D
    }
}
