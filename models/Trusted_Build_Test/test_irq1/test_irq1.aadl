-- Note: this example shows a single send of a scalar type from an
-- active thread to a passive thread.  It is designed to test:
-- 	Component naming
--  Message distribution for scalars
--  Passive thread dispatch 


package test_irq1
public 
   with Base_Types;
   with SMACCM_SYS;   

-- Example of a periodically dispatched "Active" thread.   
thread sender
	features
		Input1: in event data port Base_Types::Integer_64 {
		  Source_Text => ("user_code/user_sender.c", 
		                  "user_code/qemu_clock_driver.c", 
		                  "user_code/clock_driver.h");
		  SMACCM_SYS::Is_ISR => true; 
		  SMACCM_SYS::First_Level_Interrupt_Handler => "timer_flih";
	      Compute_Entrypoint_Source_Text => "timer_slih";
		  SMACCM_SYS::Signal_Name => "irq";
		  SMACCM_SYS::Memory_Pages => ("mem", "0x53F98000:0x1000");
		  SMACCM_SYS::Signal_Number => 27;			
	     SMACCM_SYS::Sends_Events_To =>  "{{2 Output1}}"; -- "{{}}"; -- 
		};
		Output1: out event data port Base_Types::Unsigned_32 {
	      SMACCM_SYS::CommPrim_Source_Text => "ping_Output1";			
		};
	
	properties 
	    Dispatch_Protocol => Sporadic;
	    Period => 100 ms;
	    Initialize_Entrypoint_Source_Text => "initialize_timer";
	    SMACCM_SYS::Sends_Events_To => "{{}}";
	    Priority => 10;
	    Stack_Size => 512 bytes;
	    SMACCM_SYS::Thread_Type => Active ;
	    Compute_Execution_Time => 10 us .. 50 us;
end sender ; 

-- Example of an aperiodically dispatched "passive" thread.   
thread receiver
	features
		Input1: in event data port Base_Types::Unsigned_32 {
	      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("ping_received");
		  Source_Text => ("user_code/user_receiver.c");
		}; 
				
	properties 
--       Dispatch_Protocol => Sporadic;
--       Period => 100 ms;
--       Priority => 9;
--       Stack_Size => 4096 bytes;
--	    SMACCM_SYS::Thread_Type => Active ;
       SMACCM_SYS::Thread_Type => Passive ;
       Dispatch_Protocol => Aperiodic;
	    Compute_Execution_Time => 10 us .. 50 us;
	    SMACCM_SYS::Sends_Events_To => "{{}}";
end receiver ; 


process proc

end proc;

process implementation proc.Impl
	subcomponents
		s: thread sender;
		r1: thread receiver;
	connections
		s_to_r1 : port s.Output1 -> r1.Input1;
end proc.Impl;

system test_irq1
end test_irq1;

system implementation test_irq1.impl
	subcomponents
		tl: process proc.Impl;
	properties
		SMACCM_SYS::OS => CAmkES; 
		SMACCM_SYS::HW => QEMU;
		
end test_irq1.impl;

end test_irq1;