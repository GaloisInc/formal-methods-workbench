/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

<<<<<<< HEAD
   File: C:\Users\jdbackes\git\smaccm\models\Trusted_Build_Test\test_uart_active\components\uart\src\smaccm_uart.c.template
   Created on: 2015/04/09 14:16:46
=======
   File: C:\docs\git_smaccm\smaccm\models\Trusted_Build_Test\test_uart_active\components\uart\src\smaccm_uart.c.template
   Created on: 2015/04/12 08:07:03
>>>>>>> 992bd954ada572337e9d70ddb6d7d0444deee5de
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This C file contains the implementations of the AADL primitives
  used by user-level declarations for thread uart.   

  The user code runs in terms of "dispatchers", which cause 
  dispatch user-level handlers to execute.  These handlers can 
  communicate using the standard AADL primitives, which are mapped
  to C functions.

  The send/receive handlers are not thread safe in CAmkES; it is 
  assumed that this is handled by the CAmkES sequentialized access 
  to the dispatch handler.  There is only one dispatch interface 
  for the component containing all of the dispatch points.

  They are thread safe for eChronos.

  The read/write handlers are thread safe because the writer comes 
  through a dispatch interface but the reader is "local" on a dispatch
  interface and so contention may occur.


 **************************************************************************/


#include <string.h>
#include <smaccm_uart.h>
#include <uart.h>

///////////////////////////////////////////////////////////////////////////
//
// Local prototypes for AADL dispatchers
//
///////////////////////////////////////////////////////////////////////////
void 
smaccm_uart_send_dispatcher(test_uart__uart_packet_impl * send); 
 



/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	send
 * 
 ************************************************************************/

test_uart__uart_packet_impl smaccm_queue_send [1];
bool smaccm_queue_full_send  = false;
uint32_t smaccm_queue_front_send  = 0;
uint32_t smaccm_queue_back_send  = 0;

bool smaccm_queue_is_full_send() {
	return (smaccm_queue_front_send == smaccm_queue_back_send) && (smaccm_queue_full_send);
}

bool smaccm_queue_is_empty_send() {
	return (smaccm_queue_front_send == smaccm_queue_back_send) && (!smaccm_queue_full_send); 
}

bool smaccm_queue_read_send(test_uart__uart_packet_impl * send) {
	if (smaccm_queue_is_empty_send()) {
		return false;
	} else {
		memcpy(send, &smaccm_queue_send[smaccm_queue_back_send], sizeof(test_uart__uart_packet_impl));

		smaccm_queue_back_send = (smaccm_queue_back_send + 1) % 1; 
		smaccm_queue_full_send = false ; 
		return true;
	}
}

bool smaccm_queue_write_send(const test_uart__uart_packet_impl * send) {
	if (smaccm_queue_is_full_send()) {
		return false;
	} else {
		memcpy(&smaccm_queue_send[smaccm_queue_front_send], send, sizeof(test_uart__uart_packet_impl));

		smaccm_queue_front_send = (smaccm_queue_front_send + 1) % 1; 		
		if (smaccm_queue_back_send == smaccm_queue_front_send) { 
			smaccm_queue_full_send = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  send_write_test_uart__uart_packet_impl: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool send_write_test_uart__uart_packet_impl(const test_uart__uart_packet_impl * arg) {
	bool result;
	smaccm_uart_send_mut_lock(); 
	result = smaccm_queue_write_send( arg);
	smaccm_uart_send_mut_unlock(); 
	smaccm_dispatch_sem_post();

	return result;
}


/************************************************************************
 *  uart_read_send: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool uart_read_send(test_uart__uart_packet_impl * arg) {
	bool result; 
	smaccm_uart_send_mut_lock(); 
	result = smaccm_queue_read_send(arg);
	smaccm_uart_send_mut_unlock(); 
	return result;
}



test_uart__uart_packet_impl * smaccm_tmp_array_recv; 
uint32_t * smaccm_tmp_used_recv;
uint32_t smaccm_max_tmp_array_recv; 	



/************************************************************************
 *  dispatch_dispatch_send: 
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 * 
 * This is the function invoked by an active thread dispatcher to 
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 * 
 ************************************************************************/

void dispatch_dispatch_send(
const test_uart__uart_packet_impl * send 
) {
	smaccm_max_tmp_array_recv = 0;

	send_handler(send); 

}	



/************************************************************************
 * recv_data 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool recv_data(const test_uart__uart_packet_impl * recv) {
	if (smaccm_max_tmp_array_recv > 0 && 
		 *smaccm_tmp_used_recv < smaccm_max_tmp_array_recv) {
		memcpy(&smaccm_tmp_array_recv[*smaccm_tmp_used_recv], recv, sizeof(test_uart__uart_packet_impl));

		(*smaccm_tmp_used_recv)++;
		return true;
	} else {
		return false;
	}
}


/************************************************************************
 * 
smaccm_uart_send_dispatcher
 * Invoked from local active thread.
 * 
 * This is the dispatcher function invoked to respond to an incoming thread 
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 * 
 ******************************************************************************/
void 
smaccm_uart_send_dispatcher(test_uart__uart_packet_impl * send) {

	 
	// make the call: 
	dispatch_dispatch_send(  send 
	
		); 
	 

}
 
////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

/**************************************************************************
  End of autogenerated file: C:\Users\jdbackes\git\smaccm\models\Trusted_Build_Test\test_uart_active\components\uart\src\smaccm_uart.c.template
 **************************************************************************/
