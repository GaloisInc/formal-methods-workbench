package vChan_demo
public 
   with Base_Types;
   with Data_Model;
   with SMACCM_SYS;   


-- Types for model
data arrays end arrays;

data structs
  properties
    Data_Model::Data_Representation => Struct;
end structs;

data implementation arrays.fourK_char
  properties
    Data_Model::Data_Representation => Array; --Warning if Array, won't translate as struct
    Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
    Data_Model::Dimension => (4096);
end arrays.fourK_char;

data implementation structs.vchan_buff
  subcomponents
  	owner: data Base_Types::Integer_32;
	sync_data: data arrays.fourK_char;
	filled: data Base_Types::Integer_32;
	read_pos: data Base_Types::Integer_32;
	write_pos : data Base_Types::Integer_32;	
end structs.vchan_buff;

data vchan_buffer
	properties
		SMACCM_SYS::Is_External => true;
		SMACCM_SYS::CommPrim_Source_Header => "myFile.h";
end vchan_buffer;		

data implementation arrays.two_buffs
  properties
    Data_Model::Data_Representation => Array; --Warning if Array, won't translate as struct
    -- Data_Model::Base_Type => (classifier (structs.vchan_buff));
    Data_Model::Base_Type => (classifier (vchan_buffer));
    Data_Model::Dimension => (2);
end arrays.two_buffs;

data implementation structs.vchan_shared_mem
  subcomponents
  	alloced: data Base_Types::Integer_32;
  	bufs: data arrays.two_buffs;
end structs.vchan_shared_mem;

data implementation arrays.shared_buffers
  properties
    Data_Model::Data_Representation => Array; --Warning if Array, won't translate as struct
    Data_Model::Base_Type => (classifier (structs.vchan_shared_mem));
    Data_Model::Dimension => (2);
end arrays.shared_buffers;
	
	
data implementation structs.vchan_shared_mem_headers
  subcomponents	
	shared_buffers : data arrays.shared_buffers;
	token : data Base_Types::Integer_32;
end structs.vchan_shared_mem_headers;

data implementation structs.vchan_ctrl
	subcomponents
		domain: data Base_Types::Integer_32;
		dest: data Base_Types::Integer_32;
		thePort: data Base_Types::Integer_32;
end structs.vchan_ctrl;

data implementation structs.vchan_connect
	subcomponents
		v : data structs.vchan_ctrl;
		server : data Base_Types::Integer_32;
		eventfd : data Base_Types::Integer_32;
		event_mon : data Base_Types::Unsigned_32;
end structs.vchan_connect;

-- Interfaces for model

-- If the *first* parameter is an out parameter named 'returns'
-- it makes it the return type of the function in C.
-- Otherwise, the function returns void.

subprogram new_connection
features
	returns: out parameter Base_Types::Integer_32;
	con: in parameter structs.vchan_connect;
end new_connection;

subprogram rem_connection
features
	returns: out parameter Base_Types::Integer_32; 
	con: in parameter structs.vchan_connect;
end rem_connection;

subprogram get_buf
features
	-- really intptr_t
	returns: out parameter Base_Types::Integer_32; 
	con: in parameter structs.vchan_ctrl;
	cmd: in parameter Base_Types::Integer_32;
end get_buf;

subprogram status
features
	returns: out parameter Base_Types::Integer_32; 
	con: in parameter structs.vchan_ctrl;
end status;

subprogram alert_status
features
	returns: out parameter Base_Types::Integer_32; 
	con: in parameter structs.vchan_ctrl;
end alert_status;

subprogram ping
end ping;

subprogram group VchanInterface
features
	new_connection: provides subprogram access new_connection;
	rem_connection: provides subprogram access rem_connection;
	get_buf: provides subprogram access get_buf;
	status: provides subprogram access status;
	ping: provides subprogram access ping;
end VchanInterface;

-- Example of a periodically dispatched "Active" thread.   
thread vChan_proxy
	features
		buff1 : requires data access structs.vchan_shared_mem_headers; 
		rpc: provides subprogram group access VchanInterface ;
		
		vevent_sv : out event port ;
		vevent_cl : out event port ;  
		
	
	properties 
		SMACCM_SYS::Is_External => true; 
	    Dispatch_Protocol => Sporadic;
	    Priority => 10;
	    Stack_Size => 256 bytes;
	    SMACCM_SYS::Thread_Type => Active ;
	    Compute_Execution_Time => 10 us .. 50 us;
	    SMACCM_SYS::Sends_Events_To => "{{}}";
end vChan_proxy ; 

-- Example of an aperiodically dispatched "passive" thread.   
thread receiver
	features
		buff1 : requires data access structs.vchan_shared_mem_headers; 
		rpc: requires subprogram group access VchanInterface ;
		vevent_cl : in event port {
			Compute_Entrypoint_Source_Text => "event_responder";
			Source_Text => ("user_code/receiver.c");
		};
				
	properties 
	    Dispatch_Protocol => Sporadic;
	    SMACCM_SYS::Thread_Type => Active ;
	    Priority => 10;
	    Stack_Size => 256 bytes;
	    Compute_Execution_Time => 10 us .. 50 us;
	    SMACCM_SYS::Sends_Events_To => "{{}}";
end receiver ; 


process proc

end proc;

process implementation proc.Impl
	subcomponents
		s: thread vChan_proxy;
		r: thread receiver;
		shared: data structs.vchan_shared_mem_headers;
	connections
		conn1: data access shared -> s.buff1;
		conn2: data access shared -> r.buff1;
		conn3 : subprogram group access r.rpc -> s.rpc;
		conn4 : port s.vevent_cl -> r.vevent_cl; 
end proc.Impl;

system test1
end test1;

system implementation test1.impl
	subcomponents
		tl: process proc.Impl;
	properties
		SMACCM_SYS::OS => CAmkES; 
		SMACCM_SYS::HW => QEMU;
		
end test1.impl;

end vChan_demo;