/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGcEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the main CAmkES assembly for the
  AADL system instance rooted at sel4_cpu.

 **************************************************************************/

import <VM/vm.camkes>;
import <Echo/Echo.camkes>;
import <std_connector.camkes>;

#include <autoconf.h>
#include <configurations/vm.h>

import "components/dispatch_periodic/dispatch_periodic.camkes";
/*import <TimeServerX86Stack/TimeServer.camkes>;
 import <TimeServerX86/TimeServerX86.camkes>; */
import "components/sender/sender.camkes";


component Init0 {
    dataport uint32_t sender_Output1;

    VM_INIT_DEF()
}

component VM {
    composition {
        VM_COMPOSITION_DEF()
        VM_PER_VM_COMP_DEF(0)
        connection seL4SharedDataWithCaps conn1 (from sender_inst.Output1, to vm0.sender_Output1);



        component dispatch_periodic dispatch_periodic_inst;

        // component TimeServerX86Stack time_server;
        // Component instances for all AADL-defined threads
        component sender sender_inst;

        // Port declarations and connections for active threads
        connection seL4RPCCall conn2 (from dispatch_periodic_inst.sender_periodic_dispatcher, to sender_inst.periodic_dispatcher);


        connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);

    }

    configuration {
        VM_CONFIGURATION_DEF()
        VM_PER_VM_CONFIG_DEF(0, 2)
        vm0.simple_untyped24_pool = 12;
        vm0.heap_size = 0x10000;
        vm0.guest_ram_mb = 1536;
        vm0.kernel_cmdline = VM_GUEST_CMDLINE;
        vm0.kernel_image = C162_KERNEL_IMAGE;
        vm0.kernel_relocs = C162_KERNEL_IMAGE;
        vm0.initrd_image = C162_ROOTFS;
        vm0.iospace_domain = 0x0f;
        vm0_config.ram = [ [ 0x20800000, 23 ], [ 0x21000000, 24 ], [ 0x22000000, 25 ], [ 0x24000000, 26], [ 0x28000000, 27], [0x30000000, 28], [0x40000000, 29] , [0x60000000, 29], [0x80000000, 29], [0xa0000000, 28]];
        vm0_config.pci_devices_iospace = 1;
            vm0.sender_Output1_id = 1;
            // MWW: TODO: TEMPORARY!
            vm0.sender_Output1_size = 8192;



        dispatch_periodic_inst.timer_attributes = 10;
        dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.priority = 201;


        sender_inst.priority = 10;

        sender_inst._control_stack_size = 256;

        // MWW: todo: set scheduling contexts for interfaces for thread sender_inst.

        sender_inst._period = 1000000;
        sender_inst._budget = 50;

    }
}

assembly {
    composition {
        /* The VM sub component */
        component VM vm;
    }
}
