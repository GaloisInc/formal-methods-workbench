import "Common.stg"
import "CommonOSSpecificNames.stg"
import "CommonCPrototypes.stg"
import "LinuxAssemblyHeader.stg"

/*********************************************************************
 *
 *********************************************************************/

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to process declaration for linux
//
//
////////////////////////////////////////////////////////////////////////////

mainGlueCodeCFilePurpose(name) ::= <<
This C file contains the process-level main function for process <name>.

>>

filePrefix(name, date, path) ::=
    "<stdFilePrefix(date, path, mainGlueCodeCFilePurpose(name))>"

filePostfix(name, path) ::= <<


<blockComment(arg={End of autogenerated file: <path>})>
>>

constructThreadDispatcher(sem) ::= <<
tb_sem_create(&<sem>);
>>

destructSem(sem) ::= <<
tb_sem_destroy(&<sem>);
>>

createMutex(mutex) ::= <<
tb_intraproc_mutex_create(&<mutex>);
>>

destroyMutex(mutex) ::= <<
tb_mutex_destroy(&<mutex>);
>>

createActiveThreadMutexes(threadImpl) ::= <<
<constructThreadDispatcher(threadImpl.threadDispatcherMutex)>
<threadImpl.externalMutexes:{ m |<createMutex(m)>}>
>>

createMutexes(process) ::= <<
/* create active thread mutexes */
<process.threadImplementationList:createActiveThreadMutexes()>
>>

destructActiveThreadMutexes(threadImpl) ::= <<
<destructSem(threadImpl.threadDispatcherMutex)>
<threadImpl.externalMutexes:{ m | <destructMutex(m)> }>
>>

destructMutexes(process) ::= <<
/* destruct active thread mutexes */
<process.threadImplementationList:destructActiveThreadMutexes()>
>>

threadInitializePorts(threadImpl) ::= <<
<threadImpl.portList:{ port |<port.getLinuxAddProcessCFileInitializers> }>
>>

initializePorts(process) ::= <<
/*  initializing ports */
<process.threadImplementationList:threadInitializePorts()>
>>

threadDestructPorts(threadImpl) ::= <<
<threadImpl.portList:{port |<port.linuxAddProcessCFileDestructors>}>
>>

destructPorts(process) ::= <<
<process.threadImplementationList:threadDestructPorts()>
>>


createThread(threadImpl) ::= <<
TB_THREAD_TYPE <threadImpl.normalizedName>;
tb_thread_create(&<threadImpl.normalizedName>,
   <threadImpl.priority>,
   <threadImpl.threadImplMainFnName>,
   NULL);

>>

joinThread(threadImpl) ::= <<
pthread_join(<threadImpl.normalizedName>, NULL);

>>

processMainFunction(process) ::= <<
void <process.tbAst.name>_main(void) {
    <createMutexes(process)>

    <process.threadImplementationList:createThread()>

    <process.threadImplementationList:joinThread()>

    <destroyMutexes(process)>
}

>>



writeThreadPortIncludes(threadImpl) ::= <<
<threadImpl.portList:{port|<port.linuxAddProcessCFileIncludes>}>
>>

writeThreadPortDeclarations(threadImpl) ::= <<
<threadImpl.portList:{port|<port.linuxAddProcessCFileDeclarations>}>
>>


///////////////////////////////////////////////////////////////////////////
//
// Putting it all together...
//
///////////////////////////////////////////////////////////////////////////

body(process) ::= <<

#include <\u0022><process.tbAst.model.prefix>_decls.h<\u0022>
#include <\u003C>unistd.h<\u003E>
#include <\u003C>assert.h<\u003E>

<process.threadImplementationList:writeThreadPortIncludes()>

// TODO (possibly): set up shared memory per-process

<writeProcessMutexes(process, "")>

<process.threadImplementations:writeThreadPortDeclarations()>

<processMainFunction(process)>

>>
