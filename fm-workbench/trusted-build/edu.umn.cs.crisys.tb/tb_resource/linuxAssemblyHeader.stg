import "LinuxComponentC.stg"
import "Common.stg"
import "CommonCPrototypes.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to linux shared header file
//
////////////////////////////////////////////////////////////////////////////

filePurpose(sysInstanceName) ::= <<
This file contains the declarations required for the cross-component
shared memory calls for linux.
>>

headerIfdef(sysInstanceName) ::= "__TB_AADL_<sysInstanceName>_decls__H"

filePrefix(name, date, path) ::= <<
#ifndef <headerIfdef(name)>
#define <headerIfdef(name)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, filePurpose(name))>

>>

filePostfix(name, path) ::= <<

/* endif for: #ifndef <headerIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>

writePortDecls(threadImpl) ::= <<
<threadImpl.portList:{port |<port.linuxAddCommonHFileDeclarations>}>
>>

processDecls(process) ::= <<

void <process.mainFunctionName>(void);
<process.threadImplementationList:writePortDecls()>
>>

activeThreadDecls(threadImpl) ::= <<
<commentIf({declarations for ports in thread <threadImpl.normalizedName>},
            (threadImpl.portList:{port|<port.linuxAddCommonHFileDeclarations>}))>
<writeActiveThreadMutexes(threadImpl)>
>>


writeModelMutexes(model, extern) ::= <<
<commentIf("model-level external mutexes",
        (model.externalMutexList:{ m | <extern> TB_MUTEX_TYPE <m>;
}))>
>>

headerBody(model) ::= <<

#include \<stddef.h>
#include \<stdint.h>
#include "tb_linux_support.h"
#include <\u0022><model.systemTypeHeaderName><\u0022>

// Call trusted_build_main to kick off the whole shebang...
int trusted_build_main(uint32_t runDurationInSeconds);

<model.processImplementations:processDecls()>


<writeModelMutexes(model, "extern")>
>>
