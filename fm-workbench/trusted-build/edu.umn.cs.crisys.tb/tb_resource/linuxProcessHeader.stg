import "LinuxComponentC.stg"
import "Common.stg"
import "CommonCPrototypes.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to linux shared header file
//
////////////////////////////////////////////////////////////////////////////

filePurpose(processName) ::= <<
This file contains the declarations required for the intra-process
declarations for linux.
>>

headerIfdef(processName) ::= "__TB_AADL_<processName>_decls__H"

filePrefix(name, date, path) ::= <<
#ifndef <headerIfdef(name)>
#define <headerIfdef(name)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, filePurpose(name))>

>>

filePostfix(name, path) ::= <<

/* endif for: #ifndef <headerIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>


activeThreadDecls(threadImpl) ::= <<
<commentIf({declarations for ports in thread <threadImpl.normalizedName>},
            (threadImpl.portList:{port|<port.linuxAddProcessHFileDeclarations>}))>

// "main" aadl framework function for thread <threadImpl.normalizedName>
void *<threadImpl.threadImplMainFnName>(void *);
>>

writeActiveThreadMutexes(threadImpl, extern) ::= <<

/* declarations for thread <threadImpl.normalizedName> */
<extern> TB_SEM_TYPE <threadImpl.threadDispatcherMutex>;
<threadImpl.externalMutexes:{ m | <extern> TB_MUTEX_TYPE <m>;
}>

>>


writeProcessMutexes(process, extern) ::= <<
// TODO: not sure how to declare process-level mutexes yet.
>>

writeMutexes(process, extern) ::= <<
<writeProcessMutexes(process, extern)>
<process.threadImplementationList:writeActiveThreadMutexes(extern)>
>>


headerBody(process) ::= <<

#include \<stddef.h>
#include \<stdint.h>
#include "tb_linux_support.h"
#include <\u0022><process.model.systemTypeHeaderName><\u0022>

// Call trusted_build_main to kick off the whole shebang...
int trusted_build_main(uint32_t runDurationInSeconds);

// common declarations across threads/processes.
<process.threadImplementationList:activeThreadDecls()>

<writeMutexes(process, "extern")>
>>
