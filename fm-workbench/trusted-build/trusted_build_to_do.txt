	HACMS:
	-> Interesting - StringTemplate can do map lookup ; uses dot notation for keys.  This provides mechanism
		for extension with new AADL properties.
	
	-> Code Gen questions: 
		For Dan's stuff in CAmkES, need to extend the interface to allow construction of additional components.
	
	-> There can be no sharing across mailbox / RPC dataports.  How do we want to enforce this?
		The only use of connections thus far is at the outgoing port boundary; perhaps connections 
		should be created and used to enforce comm boundaries, but this is a notion, not a real plan.
		
	-> Connections would also be handy for possibly enforcing the active/passive split for RPC connectors.

	-> EventDataPort vs. EventPort split for passive threads lead to pretty substantial changes.  It would
	   be nice to be able to separate these two types.
	   
	   If we had connections as a type with some "interesting" methods, then we could do it.
	   We could have a "write to destination" method that would implement this.
	
	-> Implementing RPCEventDataPorts: this is tricky because of the active/passive thread split.
	
		Heck with it.  For the moment, only do active threads; it is all the ground team wants.
		The only team that wants the passive threads is Galois, and they are happy with the previous
		release.
		
	! Need to add user declarations to the "common" and/or "component" header file.	
	
	-> Need to better factor OS aspects.  It would be nice to know where the OS-specific aspects are.
	
	-> Have all ports but periodic port complete!  Not too bad.
	
	-> Some OS-specific functions are not port-specific, but thread-specific (mainThreadDispatcherMutex).  
		They belong in the thread class.
		
	-> Right now I am not constructing dispatch interfaces; these are hard because they involve several 
       ports; we need to spin up the support for PortLists.  I have disabled constructing the dispatch
	   interfaces for the moment.
	   
	-> For linux, two differences for data ports: 
		We should construct new global types that contain the mutex and the shared memory structure.
	-> For linux, shared memory is by pointer using mmap.  For now we will leave it unsupported.


	-> For timers, use linux timer, I suppose.  Add it to the periodic port support for linux.
	
	-> Holy crap: have I forgotten to set priorities for Little Bird threads?
	
	-> (Future work) make extensions event-based at "known" points in the emission process.

	-> For linux processes:
		FOR NOW: 
			Need something up and running.  
			Everything is global.
			
			
		TO DO:
		port construction & visibility:
			Some ports span processes and others do not.
			Note: we will only support data ports eventually.
			
			The way to support this is to have hooks for both global declarations and process-level declarations in
			the linux emitter.  The port can choose whether to define itself at global scope, process scope, or 
			thread scope.
			
			We still need a way of connecting processes to the global definitions, but this isn't too bad.
			We also should have separate mechanisms for creating shared (cross proc) mutexes and in-proc mutexes.
			
			Then we should have a process-level header and C file.  
	   
To-dos: 
	-> Switch from Kochab to <foo>, where <voo> has the different mutex ceiling protocol
	-> Get rid of the centralized thread calendar for CAmkES
	-> Normalize the AADL property-scraping regimen; this will require some thought, and perhaps a 
		small reconfiguration of the Names and Emitters classes - probably not, though; we just 
		need to be able to pass back to the original AADL classes to get a "handle" on these properties.
	-> Change from fork() to more secure mechanism for shared memory between processes after Linux 
	   client is up and running.
	! Normalize the OS-specific emitters to include the OS name!
	-> Move connection construction into the connection class!
	-> Create connection class for dataports
	-> For atomic datatypes it is likely that a mutex is unnecessary for shared memory dataports.  
		This might be something to optimize later on.
	-> Check declarations for data ports: readerWriterImplVarDecl
	-> check on how we are wiring to periodic ports.
	-> check whether SIGRTMIN is thread safe.
	-> for Ast and Names classes, Lists sometimes have <typeName>s and sometimes <typeName>List.  Make it uniform.
	
	
	
	O.k., OSModel should have a mechanism to return the set of process implementations.
		From there, we should be able to get the thread implementations.
		getComponentClassifier() returns the process implementation
		getComponentClassifier().getChildren() returns the thread implementations (and ports, etc.)
		getChildren() returns the thread instances.
	
		! So, given that I have a map from OSATE thread instances to TB thread instances: 
			- I can connect the process instances to the thread instances.
			- I can construct a map from OSATE process implementations to TB process implementations
			- I can add the newly constructed process instance to the process implementation
			- I can add the process implementation (if not already existing) to the list of process implementations.
			- and done.
	
	O.k., from here: time to add the code for the main function to fork the code.
	
	- Done.  Now onto testing :).
	
	! Need to join threads for each proc.
	! destruct the monitor mutexes!
	! split the mutex creation into a shared / non-shared mutex
	! Change the name of the semaphore for the thread release.
	! Change the name of destructSem to the linux variant.
	! put "tb_linux_support.h" in the aadl_decls file, and 
		use the generic TB types. 
	! comment and add headers for wait() command.	
	! I have an "unnecessary" call to initialize_periodic_dispatcher() for linux.  Should I get rid of it or try to standardize?  I'm getting rid of it.
	! fix template error in CommonComponentHeader.
	
	! libraries: what do we need?
		pthreadlib: compile with -pthread
	
	! For each shared memory thing, we need to have local writers for
		each outgoing port.  First thing to check.
	! Second thing to check is: do names match up?  When we have a
		local writer, it must write to a variable that is "owned" by
		the reading thread.  How do we ensure that such variables are unique?
	! Where are we writing the shared data?
	
	-> Implement PortList functionality for Pape.
		! currently read/write .idl4 interfaces are prebuilt for 
			CAmkES.  We could emit them only from RPC ports, for 
			those types that are used by ports.
			Code lines 	86-100.
		
		-> File construction stuff needs to be refactored.  Yuck.
			Very simple, really; bring in header and footer into 
			body, then pass in all arguments; if you want to make 
			something generic, make argument names generic and 
			fill them in with a generic function.
	
	-> Should this really be in terms of threadInstances?  
		Wait until next refactoring.
	
	-> Better document all PortEmitter interfaces

	-> Make "tb" prefix uniform rather than "aadl" prefix.
	
	-> Do we care about memory/stack sizes for processes in linux?
		-> No, but we should emit a warning.
	
	-> We should emit errors for multiple instances of 
		threads in systems that do not support memory separation.
		
	-> Somewhere I'm defining an external type and I do not know
		whether I have properly specified its header.
	
	-> Consider moving to a condition variable; this seems to be
		"preferred" for linux.

	For modeling: 
		1. We have a processor that has virtual processors that are bound to it, one for each VM.
		2. Under ARINC, I do not think that there are any "raw" processes, so we can't model our CAmkES environment.
		3. Instead, I think we need to bind our virtual processor
			to a process/thread using a new property.
		4. A process can't contain another process, so there is
			no good way to describe the routing through a VM boundary
			that is visible to the user.
		5. However, you can choose to have a system that describes 
			the VM boundary and has the processor binding - it is 
			just not enforced.
	
	I want two things: 
		1. The ability to easily set the component attributes for a VM: memory, priority, processor budget.
		2. The ability to easily see which signals are routed into and out of it.
	
	Virtual processor properties: { MIPS budget, platform, 
		security level, safety criticality}
	Timing_Properties => {Execution_Time, Period, Frame_Period, Slot_Time};
	
	=> So, thread implementations don't really belong to process 
		implementations, and process implementations do not belong to OSModels.  These chains only occur on instances.
		
		Instances are always ok for CAmkES, always tricky for VxWorks and eChronos, and straightforward in Linux if they are not in the same process.
		
		
	
	To build it: 
	Start from process instances
		1. For each process instance, find the processor instance
		   binding; if none, throw an error.  For now, a process 
		   implementation can only be bound to one processor.
		
			We get back a ComponentInstanceImpl from the property,
			which is the same thing when we spin through the list
			of processors in the model.
			
			We can get the component classifier, which is a 
			VirtualProcessorImplementationImpl or a 
			ProcessorImplementationImpl
		
			From the ProcessorImplementationImpl, we can get access to properties: OS, HW, timing, period, priority
		
			So, from here: 
			Create a list of processor bindings.
			
			Construct OS models from processor bindings.
				use the standard map approach used for threads/processes.

			Do hierarchy check for virtual processors.
				If OS != linux, then error out.
				If parent OS != CAmkES, then error out.
			
			Probably no way to ensure checks are in hierarchical order; perform them afterwards?
			
			Move all of the properties that were at the system 
				level to the processor level.  Note that this is 
				not quite what we really want, but it will do.
		
			Get rid of these property checks from the top-level.
			
			Also, really error checks are based on instances rather than implementations - checking at the implementation level is wrong because an instance may be embedded in multiple contexts.
		
		2. From the processor implementation, set the OS, the 
			hardware, etc.  If it is a virtual processor, set the 
			priority, execution time, and period.
			
			Make processor instance, rather than 
			system instance / system implementation the root of the 
			hierarchy.
			
		3. Emit each target as a separate bundle of files under a 
			directory describing the virtual processor relationship: 
				root
				root_inst_a
				root_inst_b
		
		4. Children of processors are virtual processors.
		   
	Testing:
		-> Linux port: 
			tested dataports
			tested RPCs
		-> CAmkES port
			
	
Old version:
	! Allow external configuration of timer on VxWorks.
	! Stub debug support.

Back burner	
	
	
For linux: 
	thread basics: http://www.cs.cmu.edu/afs/cs/academic/class/15492-f07/www/pthreads.html
	includes:
		#include <pthread.h>
		#include <semaphore.h>
		
	thread main function prototype: void *<func>(void *);	

	thread creation:
		pthread_create( &thread1, NULL, print_message_function, (void*) message1);	

	
	to set thread priority:	
		pthread_setschedparam(pthread_t thread, SCHED_RR,
                                 const struct sched_param *param);
		where sched_param is defined as:
		   struct sched_param {
               int sched_priority;     /* Scheduling priority */
           };
		
	mutexes:
		int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
		int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared); 
			(pshared = PTHREAD_PROCESS_SHARED)
	    int pthread_mutex_lock(pthread_mutex_t *mutex);
		int pthread_mutex_trylock(pthread_mutex_t *mutex);
		int pthread_mutex_unlock(pthread_mutex_t *mutex);
		int pthread_mutex_destroy(pthread_mutex_t *mutex);

		Only one thread destroys the mutex.
		
	semaphores:
		sem_t sem_name;
	{
		sem_t semid;
		int sem_init(sem_t *sem, int pshared, unsigned  value);
	}
		pshared
			semaphore is shared between the threads of a process. If pshared is non-zero, then the semaphore is shared between processes.
		value
			The value with which the semaphore is to be initialized.
	
		int  sem_wait(sem_t *sem);
		int  sem_post(sem_t *sem);
		int  sem_destroy(sem_t *sem);

	How do I declare shared memory?
	
	Two things yet to do: 
		New dataport type for linux that uses fancy-shmancy shared memory approach.  Mutex must be built. 
			Declare new datatypes containing shared mutexes
			Initialize them in the main file.
		
		Add processes into the mix!  For now, we are still not properly dealing with instances, so we will focus on implementations.
		
		Add utility function to find parent process implementation for an element (or exception). 
		
		
	
	
	How do I set access rights?
	
	for separate processes, I can use fork() to construct them, for now.
	
	I suspect the shared memory / file mapping is to piggy-back on the linux security model.
	
	follow same style as VxWorks - rather than an explicit join, we do a wait either with INFINITE or finite time.
		- need the call for thread wait and INFINITE time.
		 
	When I fork(), child process has access to all global variables
	
	
	
	=> For shared memory:
		Need to construct the data + sem name: getReaderWriterImplVar.
		This variable will always be a pointer to the buffer.  Depending on whether we need 
			shared memory, we will assign it to the address of a locally constructed buffer or to the 
			shared memory call.
		
		For get_mutex, it needs to be the implementation var + .mtx
		

VMs:
====
	How do we build the file system?
	
	How do we link the dataports into the file system?
	
	How do we set permissions for the shared memory?
	
	What is this RPC stuff across the VM boundary?
	
	
	
	


		Dataport:
        connection seL4SharedDataWithCaps cross_vm_conn(from string_reverse.src_dp,   
                                                        to vm0.dp1);
														
		Event:
        connection seL4Notification ev2_conn(from vm0.ready,
                                             to string_reverse.ready);

        connection seL4Notification ev1_conn(from string_reverse.done,
                                             to vm0.done);

		RPC Call?!?
        connection seL4RPCCall cross_vm_putchar(from string_reverse.putchar,
                                                to serial.vm_putchar);			


Meeting with Pape:
==================

Get desktop proper size.

To discuss:
	- Meaning of interfaces
	- Outstanding issues: bringing in per-interface-type .c/.h files: is this something you need?
	- 
	